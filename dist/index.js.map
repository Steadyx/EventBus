{"mappings":"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","sources":["index.js"],"sourcesContent":["/* EventBus: function - returns: {subscribe, emit}\n * subscribe: function - returns: function - callback function\n * emit: function - returns: function - callback function\n * usage: const { subscribe, emit } = EventBus();\n * subscribe(key, callback) - returns: function - callback function\n * emit(key, value) - returns: function - callback function\n * usage: const { subscribe, getState, setState emit } = EventBus();\n *\n * The EventBus is a simple event emitter that allows you to subscribe to\n * events and emit events. I've also added state so that you can update and\n * emit the state to the subscribers. This can be useful for things like\n * updating the UI when the state changes. You can also share state between\n * components. This is a simple implementation of the EventBus pattern.\n * Take a look - https://en.wikipedia.org/wiki/Event-driven_architecture\n *******************************************************************************/\nexport const EventBus = (state) => {\n  const listeners = {};\n  const STATE_CHANGE_EVENT = \"stateChange\";\n\n  const getState = () => {\n    return state;\n  };\n\n  const logState = () => {\n    console.table(getState());\n  };\n\n  const emit = (event, ...args) => {\n    if (listeners[event]) {\n      listeners[event].forEach((listener) => {\n        listener(...args);\n      });\n    }\n  };\n\n  const on = (event, listener) => {\n    if (!listeners[event]) {\n      listeners[event] = [];\n    }\n\n    listeners[event].push(listener);\n  };\n\n  const subscribe = (event, listener) => {\n    if (Array.isArray(event)) {\n      event.forEach((event) => {\n        on(event, listener);\n      });\n    } else {\n      on(event, listener);\n    }\n  };\n\n  const off = (event, listener) => {\n    if (listeners[event]) {\n      listeners[event] = listeners[event].filter((l) => l !== listener);\n    }\n  };\n\n  const setState = (newState) => {\n    state = { ...state, ...newState };\n    emit(STATE_CHANGE_EVENT, state);\n  };\n\n  return {\n    emit,\n    on,\n    off,\n    getState,\n    logState,\n    subscribe,\n    setState,\n  };\n};\n\nconst { emit, setState, on, logState } = EventBus({\n  count: 0,\n});\n\nconst actions = {\n  increment: () => {\n    setState({ count: state.count + 1 });\n  },\n  decrement: () => {\n    setState({ count: state.count - 1 });\n  },\n};\n\nconst methods = {\n  increment: () => {\n    emit(\"increment\");\n  },\n  decrement: () => {\n    emit(\"decrement\");\n  },\n};\n\non(methods.increment, actions.increment);\non(methods.increment, actions.increment);\non(methods.increment, actions.increment);\non(methods.increment, actions.increment);\non(methods.decrement, actions.decrement);\n\nlogState();\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}